---

Meeting Info: 5:45 PM in 301 CSL on 10/27/2014

Group Updates:
- 'IRC - ##opennsm on irc.freenode.net'
- Meeting recordings

NSM in the News:

Paper Period: 'N/A'

Signature Selection: 'N/A'

Talks:
  Big Talks:
    'Bro's Logging Framework':

      Website: https://www.bro.org/sphinx-git/frameworks/logging.html

      Talk Details: Walk through using Bro's Logging Framework to create custom logs, add fields
        to existing logs, and writing logs to external sources like Elastic Search or SQL databases.

      Presenter: Vlad Grigorescu is a Senior Information Security Engineer at Carnegie Mellon University. He is also
        currently a Bro Network Security Monitor developer and has contributed to other open source
        projects, including rsyslog, logstash, CIF and ninfo. Vlad is the author of Brownian - a web interface
        for quickly searching through billions of logs generated by Bro.

# https://www.bro.org/sphinx/scripts/base/init-bare.bro.html#type-dhcp_msg
# https://github.com/bro/bro/tree/master/scripts/policy
# http://try.bro.org/#/trybro/saved/9b02b462-8fc1-4c6f-99d4-c9fd9be98e20

module HTTP_POST;

export {
    redef enum Log::ID += { HTTP_POST::LOG };

    type Info: record {
      ts: time &log;
      host: string &log;
      uri: string &log;
    };
}

event bro_init() {
    Log::create_stream(HTTP_POST::LOG, [$columns=Info]);
}

event HTTP::log_http(rec: HTTP::Info)
        {
        if ( rec$method != "POST" )
                return;
        local info: HTTP_POST::Info;
        info$ts = network_time();
        info$host = rec$host;
        info$uri = rec$uri;
        Log::write(HTTP_POST::LOG, info);
        }

# http://try.bro.org/#/trybro/saved/8396cfcc-96b2-46b4-807c-cf8297013723v
module DHCP;

export {
        redef record DHCP::Info += {
                op: count &log &optional;
        };
}

event dhcp_ack(c: connection, msg: dhcp_msg, mask: addr, router: dhcp_router_list, lease: interval, serv_addr: addr, host_name: string) &priority=0
        {
        c$dhcp$op = msg$op;
        }

# http://try.bro.org/#/trybro/saved/8396cfcc-96b2-46b4-807c-cf8297013723
module DHCP;

export {
        redef record DHCP::Info += {
                op: count &log &optional;
        };
}

event dhcp_ack(c: connection, msg: dhcp_msg, mask: addr, router: dhcp_router_list, lease: interval, serv_addr: addr, host_name: string) &priority=0
        {
        print "Handling event";
        c$dhcp$op = msg$op;
        }

